## Event number description
---Strange event number branch:
DoubleEG
GJet_Pt-20to40_DoubleEMEnriched_MGG-80toInf_TuneCP5_13TeV_Pythia8
QCD_Pt-30to40_DoubleEMEnriched_MGG-80toInf_TuneCP5_13TeV_Pythia8
QCD_Pt-30toInf_DoubleEMEnriched_MGG-40to80_TuneCP5_13TeV_Pythia8
QCD_Pt-40toInf_DoubleEMEnriched_MGG-80toInf_TuneCP5_13TeV_Pythia8


## Workflow

---Preselection---

src/Presel_CorrSyst.cc:
Process flashgg n-tuples (central & systematics). Apply corrections and parts of preselection.
Run with script/Presel_basic.py
Output:
    Presel_basic/
    Systematics/Presel_basic/

src/Presel_had.cc Presel_lep.cc Presel_photonIDMVA.cc Presel_btag.cc:
Apply further preselection on each sample.
Run with script/Presel_general.py
Central:
    input: Presel_basic/
    output: Presel_had_phID_btag-L/ Presel_lep_phID/
Systematics:
    input: Systematics/Presel_basic/
    output: Systematics/Presel_had_phID_btag-L/ Systematics/Presel_lep_phID/

Note:
- After preselection, in leptonic channel "QCD_Pt-30to40_MGG-80toInf" sample doesn't have any
  event left.


---Normalization---

macro/NormFactor/NormFactor.cc:
Calculate and save norm factors for MC samples.
For samples with multiple root files, call SumWeight.sh to calculate sum of genweight.
SumWeight.sh uses CreateWeight.cc & src/AddWeight.cc.
Input: flashgg n-tuples
Output:
    sumweight/
    normfactor/


---Scale Factors---

src/SFcalc_PU.cc SFcalc_Electron.cc SFcalc_Muon.cc:
Calculate SFs and add them to event tree. The original tree is overwritten.
Run with script/AddScaleFactors.py
For signal MC & resonant bkg MC, systematic uncertainty weights are also saved.
Input:
    hadronic: Presel_had_phID_btag-L/
    leptonic: Presel_lep_phID/

src/SFcalc_btag_factor.cc:
Calculate b-tagging SF extrapolation factor for each MC sample.
Run with script/AddScaleFactors.py
Run before applying any cut on b-tagging score.
Input:
    hadronic: Presel_had_phID/
    leptonic: Presel_lep_phID/
Output:
    hadronic: SFbtag_extrapolation_had/
    leptonic: SFbtag_extrapolation_lep/
Note: Run SFcalc_PU, SFcalc_Electron, SFcalc_Muon first on the samples.

src/SFcalc_btag.cc:
Calculate b-tagging SF & add them to event tree. The original tree is overwritten.
Run with script/AddScaleFactors.py
For signal MC & resonant bkg MC, systematic uncertainty weights are also saved.
Input:
    hadronic: Presel_had_phID_btag-L/ SFbtag_extrapolation_had/
    leptonic: Presel_lep_phID/ SFbtag_extrapolation_lep/

src/MakeWeight.cc:
Calculate event weight for MC samples after getting all SFs.
Run with script/AddScaleFactors.py
For signal MC & resonant bkg MC, event weight with syst uncertainty variation is also saved.
Input:
    hadronic: Presel_had_phID_btag-L/
    leptonic: Presel_lep_phID/

src/MakeWeight_data.cc:
Adding SFs & event weights to data tree to make it consistent with MC trees.
Central SFs & weight are saved as 1 and syst uncertainty SFs & weights are saved as -999.
Input:
    hadronic: Presel_had_phID_btag-L/data.root
    leptonic: Presel_lep_phID/data.root

---
script/AddScaleFactors_syst.py:  (to be run)
Add SFs to systematic trees.
Warning: Run all trees together will occupy hundreds of GBs volumn!
Input:
    hadronic: Systematics/Presel_had_phID_btag-L/
    leptonic: Systematics/Presel_lep_phID/
b-tag factor:
    hadronic: SFbtag_extrapolation_had/
    leptonic: SFbtag_extrapolation_lep/
---


---Event yield---

macro/yields/GetYields_had.cc:
Calculate event yields for hadronic preselection. (without data-driven QCD)
Input: Presel_had_phID_btag-L/
Output: Presel_had_phID_btag-L/yields.log

macro/yields/GetYields_lep.cc
Calculate event yields for leptonic preselection.
Input: Presel_lep_phID/
Output: Presel_lep_phID/yields.log


---Fill histograms---

src/FillHist_had.cc FillHist_lep.cc:
Fill histograms for each sample using their event trees.
Run with script/FillHist.py.
Hadronic channel:
  Input: Presel_had_phID_btag-L/
  Output: Presel_had_phID_btag-L/hist/
Leptonic channel:
  Input: Presel_lep_phID/
  Output: Presel_lep_phID/hist/


---Make stacked plots---

macro/PlotHist/PlotHist_had_v2.cc:
Make stacked plots using histograms from all hadronic samples.
Input: Presel_had_phID_btag-L/hist/
Output: Presel_had_phID_btag-L/plots/

macro/PlotHist/PlotHist_lep_v2.cc:
Make stacked plots using histograms from all leptonic samples.
Input: Presel_lep_phID/hist/
Output: Presel_lep_phID/plots/


---Data-driven QCD---

src/Presel_had_phIDSB.cc:
Select events in photon MVA ID sideband (hadronic channel).
Run with script/Presel_general.py.
Input: Presel_had/
Output: Presel_had_phIDSB/

macro/Data-driven_QCD/:
Macros for producing data-driven QCD samples.
See macro/Data-driven_QCD/note for more info.

macro/yields/GetYields_had_DDqcd.cc:
Calculating event yields using data-driven sample tree.

macro/PlotHist/PlotHist_had_DDqcd.cc:
Making stacked plots using data-driven sample histograms.


---Find gen-particles---

src/FindGenPart.cc:
Find hard-interacting gen-particles for signal MC events. (needed for MVA event reconstruction)
New trees containing gen-particle indices are added to the input files.
Run with script/FindGenPart.py.
Input:
  Hadronic: Presel_had_phID_btag-L/
  Leptonic: Presel_lep_phID/


---Divide MC samples---

src/DivideSamples_v3.cc: (not used)
Divide MC samples as seperate parts, using branch "EvtInfo.EvtNo".
src/DivideSamples_v4.cc: (not used)
Divide MC samples as seperate parts, using event index.
Run with script/DivideSamples.py.
Input:
  Hadronic: Presel_had_phID_btag-L/
  Leptonic: Presel_lep_phID/
Output:
  Hadronic: Presel_had_phID_btag-L/train_set/, opt_set/, fit_set/
  Leptonic: Presel_lep_phID/train_set/, opt_set/, fit_set/

Note:
After dividing leptonic samples, "QCD_Pt-30toInf_MGG-40to80" samples are discarded since no event
left for some divided parts.

src/ScaleWeight.cc: (not used)
Scale event weights after dividing samples.
Run with script/DivideSamples.py.
Input:
  Hadronic: Presel_had_phID_btag-L/
  Leptonic: Presel_lep_phID/

macro/AddEventIdx.cc
Set event index for samples having strange index. (see the above)

Note: "QCD_Pt-30toInf_MGG-40to80" has only one event and is not used in the following steps.


---MVA reconstruction---

src/MVAreco_GenPerm_TThad.cc MVAreco_GenPerm_SThad.cc MVAreco_GenPerm_TTlep.cc MVAreco_GenPerm_STlep.cc:
Generate permutation tree from event tree.
Run with script/MVAreco_GenPerm.py.
Input:
  Hadronic: Presel_had_phID_btag-L/
  Leptonic: Presel_lep_phID/
Output:
  Hadronic: MVAreco_perms_had/
  Leptonic: MVAreco_perms_lep/

src/MVAreco_train.cc:
Begin reconstruction MVA training.
Run with script/MVAreco_train.py.
Input:
  Hadronic: MVAreco_perms_had/
  Leptonic: MVAreco_perms_lep/
Output:
  MVAreco_model/

src/MVAreco_application.cc:
Apply trained MVA models to permutation trees.
Run with script/MVAreco_application.py.
Input:
  Hadronic: MVAreco_perms_had/
  Leptonic: MVAreco_perms_lep/
TMVA models:
  MVAreco_model/
Output:
  Hadronic: MVAreco_result_had/
  Leptonic: MVAreco_result_lep/

src/NuPz.cc:
Reconstruct neutrino Pz with result from reco NN for leptonic samples.
Add null values for hadronic samples.
New branch is added to and overwrite the reco trees.
Run with script/MVAreco_application.py.
Input:
  Hadronic: Presel_had_phID_btag-L/  MVAreco_result_had/
  Leptonic: Presel_lep_phID/  MVAreco_result_lep/


---Make BDT input variables---

src/MakeBDTinput_had.cc MakeBDTinput_lep.cc:
Produce trees with BDT input variables from event trees & reco trees.
As far as I know TMVA can only handle a single tree, so one has to merge necessary variables manually.
Run with script/MakeBDTinput.py.
Input:
  Hadronic: Presel_had_phID_btag-L/  MVAreco_result_had/
  Leptonic: Presel_lep_phID/  MVAreco_result_lep/
  Norm factor: normfactor/
Output:
  Hadronic: BDT_input_had/
  Leptonic: BDT_input_lep/

src/FillHist_BDT_had.cc FillHist_BDT_lep.cc:
Make histograms of BDT input variables for each sample.
Run with script/FillHist.py.
Input:
  Hadronic: BDT_input_had/
  Leptonic: BDT_input_lep/
Output:
  Hadronic: BDT_input_had/hist/
  Leptonic: BDT_input_lep/hist/

macro/PlotHist/PlotHist_BDT_had.cc PlotHist_BDT_lep.cc:
Make stacked plots from histograms of BDT variables.
Input:
  Hadronic: BDT_input_had/hist/
  Leptonic: BDT_input_lep/hist/
Output:
  Hadronic: BDT_input_had/plots/
  Leptonic: BDT_input_lep/plots/


---BDT training---
src/BDT_train.cc:
Train BDT for hadronic or leptonic channel.
Run with script/BDT_train.py.
Input:
  Hadronic: BDT_input_had/
  Leptonic: BDT_input_lep/
Output:
  BDT_model/

macro/PlotBDTscore.cc:
Make BDT score plots for training/test signal/background samples.
The only reason that this macro exists is that TMVA somehow cannot make the plot for hadronic channel
using TMVA::TMVAGui(filename).
WTF TMVA!?


---BDT application---

src/BDT_application.cc:
Applied BDT to hadronic or leptonic channel. BDT score is attached to input tree.
Run with script/BDT_application.py.
Input:
  Hadronic: BDT_input_had/
  Leptonic: BDT_input_lep/


---Add BDT variables---

src/AddBdtVar.cc:
Add variables from event tree to BDT tree.
Some variables are needed in later stage of analysis but are not included in BDT trees when generated,
e.g., diphoton mass. This code reads event trees & BDT trees and adds additional variables to BDT trees.
(In principle, events in event trees and BDT trees have 1-to-1 correspondence.) The original BDT trees
are overwritten.
Run with script/MakeBDTinput.py.
Input:
    Hadronic: Presel_had_phID_btag-L/  BDT_input_had/
    Leptonic: Presel_lep_phID/  BDT_input_lep/
